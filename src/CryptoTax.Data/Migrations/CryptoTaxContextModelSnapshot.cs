// <auto-generated />
using System;
using CryptoTax.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoTax.Data.Migrations
{
    [DbContext(typeof(CryptoTaxContext))]
    partial class CryptoTaxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("CryptoTax.Data.Entities.BillingTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FullAmountInCents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Threshold")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BillingTiers");
                });

            modelBuilder.Entity("CryptoTax.Data.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AmountInCents")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BillingTierId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxYear")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BillingTierId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("CryptoTax.Data.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("IncomingTxCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NetRealizedGains")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutgoingTxCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaxYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradeCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("CryptoTax.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoTax.Data.Entities.Purchase", b =>
                {
                    b.HasOne("CryptoTax.Data.Entities.BillingTier", "Tier")
                        .WithMany()
                        .HasForeignKey("BillingTierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CryptoTax.Data.Entities.User", null)
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoTax.Data.Entities.Report", b =>
                {
                    b.HasOne("CryptoTax.Data.Entities.User", null)
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
